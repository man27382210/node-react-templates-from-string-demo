webpackJsonp([1],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(59);
	module.exports = __webpack_require__(236);


/***/ },

/***/ 236:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	'use strict';
	
	var React = __webpack_require__(125);
	var ReactDOM = __webpack_require__(230);
	var Examples = __webpack_require__(237);
	__webpack_require__(259);
	
	var elem = React.createElement(Examples);
	var rootInstance = ReactDOM.render(elem, document.getElementById('home-section'));
	
	if (true) {
	    __webpack_require__(232).RootInstanceProvider.injectProvider({
	        getRootInstances: function () {
	            // Help React Hot Loader figure out the root component instances on the page:
	            return [rootInstance];
	        }
	    });
	}

	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "home-main.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 237:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(229), __webpack_require__(125), __webpack_require__(238), __webpack_require__(267), __webpack_require__(268), __webpack_require__(269), __webpack_require__(270), __webpack_require__(271), __webpack_require__(272), __webpack_require__(273), __webpack_require__(274), __webpack_require__(275), __webpack_require__(276), __webpack_require__(277), __webpack_require__(278), __webpack_require__(279)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, React, examplesTemplate, helloCode, helloRT, todoCode, todoRT, rtIfCode, rtIfRT, rtPropsCode, rtPropsRT, rtRepeatCode, rtRepeatRT, weatherCode, weatherRT, rtRequireRT) {
	    'use strict';
	
	    var LinkedStateMixin = __webpack_require__(265);
	
	    var samples = {
	        hello: [helloCode, helloRT],
	        todo: [todoCode, todoRT],
	        props: [rtPropsCode, rtPropsRT],
	        rtIf: [rtIfCode, rtIfRT],
	        repeat: [rtRepeatCode, rtRepeatRT],
	        weather: [weatherCode, weatherRT]
	    };
	    //samples = _.map(samples, function (v, k) {
	    //    return {name: k, templateProps: _.template(v[0])({name: k}), templateHTML: v[1]};
	    //});
	    _.forEach(samples, function (v, k) {
	        samples[k] = { name: k, templateProps: _.template(v[0])({ name: k }), templateHTML: v[1] };
	    });
	
	    return React.createClass({
	        displayName: 'Examples',
	        mixins: [LinkedStateMixin],
	        getInitialState: function () {
	            var codeAmd = window.reactTemplates.convertTemplateToReact(rtRequireRT, { modules: 'amd', name: 'template' });
	            var codeCJS = window.reactTemplates.convertTemplateToReact(rtRequireRT, { modules: 'commonjs', name: 'template' });
	            var codeES6 = window.reactTemplates.convertTemplateToReact(rtRequireRT, { modules: 'es6', name: 'template' });
	            return {
	                rtRequire: { value: rtRequireRT },
	                amd: { value: codeAmd },
	                cjs: { value: codeCJS },
	                es6: { value: codeES6 },
	                samples: samples
	            };
	        },
	        render: examplesTemplate
	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "examples.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 238:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(239),
	    __webpack_require__(229),
	    __webpack_require__(258),
	    __webpack_require__(266)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _, playground, viewer) {
	    'use strict';
	    return function () {
	        return React.createElement(div, { 'id': 'examples' }, React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'Hello world in React Templates'), React.createElement(p, {}, '\n            Simple "Hello world" HTML transformed into React JavaScript code.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'helloExample',
	            'direction': 'horizontal'
	        }, this.state.samples.hello))), React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'rt-if'), React.createElement(p, {}, '\n            This shows the use of rt-if.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'ifExample',
	            'direction': 'horizontal'
	        }, this.state.samples.rtIf))), React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'rt-repeat'), React.createElement(p, {}, '\n            This uses rt-repeat to show multiple items and rt-scope to create a reusable name for multiple calculations.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'repeatExample',
	            'direction': 'horizontal'
	        }, this.state.samples.repeat))), React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'rt-props'), React.createElement(p, {}, '\n            rt-props is used to pass all the original properties set on this component (except the ones used for the component logic: onClick and eventId) to the element that will actually represent this component.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'propsExample',
	            'direction': 'horizontal'
	        }, this.state.samples.props))), React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'Improved todo list'), React.createElement(p, {}, '\n            Every project needs a todo list example, so here is ours.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'todoExample',
	            'direction': 'horizontal'
	        }, this.state.samples.todo))), React.createElement(div, { 'className': 'example' }, React.createElement(h3, {}, 'Weather'), React.createElement(p, {}, '\n            This example shows working with async events, the usage of regular event handler function pointers instead of lambda expression, and working with two-way binding.\n        '), React.createElement(playground, _.assign({}, {
	            'id': 'weatherExample',
	            'direction': 'horizontal'
	        }, this.state.samples.weather))), React.createElement(div, {
	            'id': 'rt-require',
	            'className': 'example'
	        }, React.createElement(h3, {}, 'rt-require'), React.createElement(p, {}, '\n            This example shows how to load other React components and libraries into a React template and then use them within the template.\n        '), React.createElement(viewer, _.assign({}, { 'mode': 'javascript' }, this.state.rtRequire))), React.createElement(div, {
	            'id': 'amd',
	            'className': 'example'
	        }, React.createElement(h3, {}, 'AMD'), React.createElement(p, {}, '\n            This example shows the rt-require sample output with AMD support.\n        '), React.createElement(viewer, _.assign({}, { 'mode': 'javascript' }, this.state.amd))), React.createElement(div, {
	            'id': 'commonjs',
	            'className': 'example'
	        }, React.createElement(h3, {}, 'CommonJS'), React.createElement(p, {}, '\n            This example shows the rt-require sample output with CommonJS support.\n        '), React.createElement(viewer, _.assign({}, { 'mode': 'javascript' }, this.state.cjs))), React.createElement(div, {
	            'id': 'es6',
	            'className': 'example'
	        }, React.createElement(h3, {}, 'ES6'), React.createElement(p, {}, '\n            This example shows the rt-require sample output with ES6 support.\n        '), React.createElement(viewer, _.assign({}, { 'mode': 'javascript' }, this.state.es6))));
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "examples.rt" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 239:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var warning = __webpack_require__(83);
	warning(
	  false,
	  // Require examples in this string must be split to prevent React's
	  // build tools from mistaking them for real requires.
	  // Otherwise the build tools will attempt to build a 'react-addons-{addon}' module.
	  'require' + "('react/addons') is deprecated. " +
	  'Access using require' + "('react-addons-{addon}') instead."
	);
	
	module.exports = __webpack_require__(240);


/***/ },

/***/ 240:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */
	
	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */
	
	'use strict';
	
	var LinkedStateMixin = __webpack_require__(241);
	var React = __webpack_require__(126);
	var ReactComponentWithPureRenderMixin = __webpack_require__(244);
	var ReactCSSTransitionGroup = __webpack_require__(246);
	var ReactFragment = __webpack_require__(252);
	var ReactTransitionGroup = __webpack_require__(247);
	var ReactUpdates = __webpack_require__(107);
	
	var cloneWithProps = __webpack_require__(253);
	var shallowCompare = __webpack_require__(245);
	var update = __webpack_require__(256);
	var warning = __webpack_require__(83);
	
	var warnedAboutBatchedUpdates = false;
	
	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,
	
	  batchedUpdates: function () {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(warnedAboutBatchedUpdates, 'React.addons.batchedUpdates is deprecated. Use ' + 'ReactDOM.unstable_batchedUpdates instead.') : undefined;
	      warnedAboutBatchedUpdates = true;
	    }
	    return ReactUpdates.batchedUpdates.apply(this, arguments);
	  },
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  shallowCompare: shallowCompare,
	  update: update
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  React.addons.Perf = __webpack_require__(213);
	  React.addons.TestUtils = __webpack_require__(257);
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 241:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactLink = __webpack_require__(242);
	var ReactStateSetters = __webpack_require__(243);
	
	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function (key) {
	    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
	  }
	};
	
	module.exports = LinkedStateMixin;

/***/ },

/***/ 242:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   _handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */
	
	var React = __webpack_require__(126);
	
	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}
	
	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ? React.PropTypes.any.isRequired : linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}
	
	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};
	
	module.exports = ReactLink;

/***/ },

/***/ 243:
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */
	
	'use strict';
	
	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (component, funcReturningState) {
	    return function (a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};
	
	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}
	
	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },
	
	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};
	
	module.exports = ReactStateSetters;

/***/ },

/***/ 244:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */
	
	'use strict';
	
	var shallowCompare = __webpack_require__(245);
	
	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function (nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};
	
	module.exports = ReactComponentWithPureRenderMixin;

/***/ },

/***/ 245:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule shallowCompare
	*/
	
	'use strict';
	
	var shallowEqual = __webpack_require__(188);
	
	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}
	
	module.exports = shallowCompare;

/***/ },

/***/ 246:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */
	
	'use strict';
	
	var React = __webpack_require__(126);
	
	var assign = __webpack_require__(90);
	
	var ReactTransitionGroup = __webpack_require__(247);
	var ReactCSSTransitionGroupChild = __webpack_require__(249);
	
	function createTransitionTimeoutPropValidator(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;
	
	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');
	
	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	        }
	    }
	  };
	}
	
	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',
	
	  propTypes: {
	    transitionName: ReactCSSTransitionGroupChild.propTypes.name,
	
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool,
	    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
	    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
	    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
	  },
	
	  getDefaultProps: function () {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },
	
	  _wrapChild: function (child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return React.createElement(ReactCSSTransitionGroupChild, {
	      name: this.props.transitionName,
	      appear: this.props.transitionAppear,
	      enter: this.props.transitionEnter,
	      leave: this.props.transitionLeave,
	      appearTimeout: this.props.transitionAppearTimeout,
	      enterTimeout: this.props.transitionEnterTimeout,
	      leaveTimeout: this.props.transitionLeaveTimeout
	    }, child);
	  },
	
	  render: function () {
	    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));
	  }
	});
	
	module.exports = ReactCSSTransitionGroup;

/***/ },

/***/ 247:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */
	
	'use strict';
	
	var React = __webpack_require__(126);
	var ReactTransitionChildMapping = __webpack_require__(248);
	
	var assign = __webpack_require__(90);
	var emptyFunction = __webpack_require__(84);
	
	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',
	
	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },
	
	  getDefaultProps: function () {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },
	
	  getInitialState: function () {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },
	
	  componentWillMount: function () {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },
	
	  componentDidMount: function () {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },
	
	  componentWillReceiveProps: function (nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });
	
	    var key;
	
	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  },
	
	  componentDidUpdate: function () {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },
	
	  performAppear: function (key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	
	    if (component.componentWillAppear) {
	      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },
	
	  _handleDoneAppearing: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);
	
	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },
	
	  performEnter: function (key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	
	    if (component.componentWillEnter) {
	      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },
	
	  _handleDoneEntering: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);
	
	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },
	
	  performLeave: function (key) {
	    this.currentlyTransitioningKeys[key] = true;
	
	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },
	
	  _handleDoneLeaving: function (key) {
	    var component = this.refs[key];
	
	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }
	
	    delete this.currentlyTransitioningKeys[key];
	
	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);
	
	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      this.setState(function (state) {
	        var newChildren = assign({}, state.children);
	        delete newChildren[key];
	        return { children: newChildren };
	      });
	    }
	  },
	
	  render: function () {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }
	    return React.createElement(this.props.component, this.props, childrenToRender);
	  }
	});
	
	module.exports = ReactTransitionGroup;

/***/ },

/***/ 248:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */
	
	'use strict';
	
	var flattenChildren = __webpack_require__(187);
	
	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function (children) {
	    if (!children) {
	      return children;
	    }
	    return flattenChildren(children);
	  },
	
	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function (prev, next) {
	    prev = prev || {};
	    next = next || {};
	
	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }
	
	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};
	
	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }
	
	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }
	
	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }
	
	    return childMapping;
	  }
	};
	
	module.exports = ReactTransitionChildMapping;

/***/ },

/***/ 249:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */
	
	'use strict';
	
	var React = __webpack_require__(126);
	var ReactDOM = __webpack_require__(127);
	
	var CSSCore = __webpack_require__(250);
	var ReactTransitionEvents = __webpack_require__(251);
	
	var onlyChild = __webpack_require__(227);
	
	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	
	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',
	
	  propTypes: {
	    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      active: React.PropTypes.string
	    }), React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      enterActive: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      leaveActive: React.PropTypes.string,
	      appear: React.PropTypes.string,
	      appearActive: React.PropTypes.string
	    })]).isRequired,
	
	    // Once we require timeouts to be specified, we can remove the
	    // boolean flags (appear etc.) and just accept a number
	    // or a bool for the timeout flags (appearTimeout etc.)
	    appear: React.PropTypes.bool,
	    enter: React.PropTypes.bool,
	    leave: React.PropTypes.bool,
	    appearTimeout: React.PropTypes.number,
	    enterTimeout: React.PropTypes.number,
	    leaveTimeout: React.PropTypes.number
	  },
	
	  transition: function (animationType, finishCallback, userSpecifiedDelay) {
	    var node = ReactDOM.findDOMNode(this);
	
	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }
	
	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timeout = null;
	
	    var endListener = function (e) {
	      if (e && e.target !== node) {
	        return;
	      }
	
	      clearTimeout(timeout);
	
	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);
	
	      ReactTransitionEvents.removeEndEventListener(node, endListener);
	
	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };
	
	    CSSCore.addClass(node, className);
	
	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);
	
	    // If the user specified a timeout delay.
	    if (userSpecifiedDelay) {
	      // Clean-up the animation after the specified delay
	      timeout = setTimeout(endListener, userSpecifiedDelay);
	    } else {
	      // DEPRECATED: this listener will be removed in a future version of react
	      ReactTransitionEvents.addEndEventListener(node, endListener);
	    }
	  },
	
	  queueClass: function (className) {
	    this.classNameQueue.push(className);
	
	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },
	
	  flushClassNameQueue: function () {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },
	
	  componentWillMount: function () {
	    this.classNameQueue = [];
	  },
	
	  componentWillUnmount: function () {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },
	
	  componentWillAppear: function (done) {
	    if (this.props.appear) {
	      this.transition('appear', done, this.props.appearTimeout);
	    } else {
	      done();
	    }
	  },
	
	  componentWillEnter: function (done) {
	    if (this.props.enter) {
	      this.transition('enter', done, this.props.enterTimeout);
	    } else {
	      done();
	    }
	  },
	
	  componentWillLeave: function (done) {
	    if (this.props.leave) {
	      this.transition('leave', done, this.props.leaveTimeout);
	    } else {
	      done();
	    }
	  },
	
	  render: function () {
	    return onlyChild(this.props.children);
	  }
	});
	
	module.exports = ReactCSSTransitionGroupChild;

/***/ },

/***/ 250:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(75);
	
	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */
	
	var CSSCore = {
	
	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function (element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },
	
	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }
	
	};
	
	module.exports = CSSCore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 251:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(92);
	
	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },
	
	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};
	
	var endEvents = [];
	
	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }
	
	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }
	
	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}
	
	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.
	
	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}
	
	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}
	
	var ReactTransitionEvents = {
	  addEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	
	  removeEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};
	
	module.exports = ReactTransitionEvents;

/***/ },

/***/ 252:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFragment
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(181);
	var ReactElement = __webpack_require__(95);
	
	var emptyFunction = __webpack_require__(84);
	var invariant = __webpack_require__(75);
	var warning = __webpack_require__(83);
	
	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is an array.
	 */
	
	var numericPropertyRegex = /^\d+$/;
	
	var warnedAboutNumeric = false;
	
	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function (object) {
	    if (typeof object !== 'object' || !object || Array.isArray(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : undefined;
	      return object;
	    }
	    if (ReactElement.isValidElement(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : undefined;
	      return object;
	    }
	
	    !(object.nodeType !== 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(false) : undefined;
	
	    var result = [];
	
	    for (var key in object) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : undefined;
	          warnedAboutNumeric = true;
	        }
	      }
	      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
	    }
	
	    return result;
	  }
	};
	
	module.exports = ReactFragment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 253:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(95);
	var ReactPropTransferer = __webpack_require__(254);
	
	var keyOf = __webpack_require__(150);
	var warning = __webpack_require__(83);
	
	var CHILDREN_PROP = keyOf({ children: null });
	
	var didDeprecatedWarn = false;
	
	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 * @deprecated
	 */
	function cloneWithProps(child, props) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(didDeprecatedWarn, 'cloneWithProps(...) is deprecated. ' + 'Please use React.cloneElement instead.') : undefined;
	    didDeprecatedWarn = true;
	    process.env.NODE_ENV !== 'production' ? warning(!child.ref, 'You are calling cloneWithProps() on a child with a ref. This is ' + 'dangerous because you\'re creating a new child which will not be ' + 'added as a ref to its parent.') : undefined;
	  }
	
	  var newProps = ReactPropTransferer.mergeProps(props, child.props);
	
	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }
	
	  // The current API doesn't retain _owner, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}
	
	module.exports = cloneWithProps;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 254:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */
	
	'use strict';
	
	var assign = __webpack_require__(90);
	var emptyFunction = __webpack_require__(84);
	var joinClasses = __webpack_require__(255);
	
	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function (props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}
	
	var transferStrategyMerge = createTransferStrategy(function (a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});
	
	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};
	
	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }
	
	    var transferStrategy = TransferStrategies[thisKey];
	
	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}
	
	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {
	
	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function (oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }
	
	};
	
	module.exports = ReactPropTransferer;

/***/ },

/***/ 255:
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} className
	 * @return {string}
	 */
	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}
	
	module.exports = joinClasses;

/***/ },

/***/ 256:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var assign = __webpack_require__(90);
	var keyOf = __webpack_require__(150);
	var invariant = __webpack_require__(75);
	var hasOwnProperty = ({}).hasOwnProperty;
	
	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}
	
	var COMMAND_PUSH = keyOf({ $push: null });
	var COMMAND_UNSHIFT = keyOf({ $unshift: null });
	var COMMAND_SPLICE = keyOf({ $splice: null });
	var COMMAND_SET = keyOf({ $set: null });
	var COMMAND_MERGE = keyOf({ $merge: null });
	var COMMAND_APPLY = keyOf({ $apply: null });
	
	var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];
	
	var ALL_COMMANDS_SET = {};
	
	ALL_COMMANDS_LIST.forEach(function (command) {
	  ALL_COMMANDS_SET[command] = true;
	});
	
	function invariantArrayCase(value, spec, command) {
	  !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : undefined;
	  var specValue = spec[command];
	  !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : undefined;
	}
	
	function update(value, spec) {
	  !(typeof spec === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : undefined;
	
	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : undefined;
	
	    return spec[COMMAND_SET];
	  }
	
	  var nextValue = shallowCopy(value);
	
	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    !(mergeObj && typeof mergeObj === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : undefined;
	    !(nextValue && typeof nextValue === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : undefined;
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }
	
	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function (item) {
	      nextValue.push(item);
	    });
	  }
	
	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function (item) {
	      nextValue.unshift(item);
	    });
	  }
	
	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : undefined;
	    !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	    spec[COMMAND_SPLICE].forEach(function (args) {
	      !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	      nextValue.splice.apply(nextValue, args);
	    });
	  }
	
	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : undefined;
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }
	
	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }
	
	  return nextValue;
	}
	
	module.exports = update;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 257:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(77);
	var EventPluginHub = __webpack_require__(79);
	var EventPropagators = __webpack_require__(144);
	var React = __webpack_require__(126);
	var ReactDOM = __webpack_require__(127);
	var ReactElement = __webpack_require__(95);
	var ReactBrowserEventEmitter = __webpack_require__(76);
	var ReactCompositeComponent = __webpack_require__(116);
	var ReactInstanceHandles = __webpack_require__(98);
	var ReactInstanceMap = __webpack_require__(100);
	var ReactMount = __webpack_require__(72);
	var ReactUpdates = __webpack_require__(107);
	var SyntheticEvent = __webpack_require__(148);
	
	var assign = __webpack_require__(90);
	var emptyObject = __webpack_require__(111);
	var findDOMNode = __webpack_require__(162);
	var invariant = __webpack_require__(75);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function Event(suffix) {}
	
	/**
	 * @class ReactTestUtils
	 */
	
	function findAllInRenderedTreeInternal(inst, test) {
	  if (!inst || !inst.getPublicInstance) {
	    return [];
	  }
	  var publicInst = inst.getPublicInstance();
	  var ret = test(publicInst) ? [publicInst] : [];
	  var currentElement = inst._currentElement;
	  if (ReactTestUtils.isDOMComponent(publicInst)) {
	    var renderedChildren = inst._renderedChildren;
	    var key;
	    for (key in renderedChildren) {
	      if (!renderedChildren.hasOwnProperty(key)) {
	        continue;
	      }
	      ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
	    }
	  } else if (ReactElement.isValidElement(currentElement) && typeof currentElement.type === 'function') {
	    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
	  }
	  return ret;
	}
	
	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function (instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return ReactDOM.render(instance, div);
	  },
	
	  isElement: function (element) {
	    return ReactElement.isValidElement(element);
	  },
	
	  isElementOfType: function (inst, convenienceConstructor) {
	    return ReactElement.isValidElement(inst) && inst.type === convenienceConstructor;
	  },
	
	  isDOMComponent: function (inst) {
	    return !!(inst && inst.nodeType === 1 && inst.tagName);
	  },
	
	  isDOMComponentElement: function (inst) {
	    return !!(inst && ReactElement.isValidElement(inst) && !!inst.tagName);
	  },
	
	  isCompositeComponent: function (inst) {
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      // Accessing inst.setState warns; just return false as that'll be what
	      // this returns when we have DOM nodes as refs directly
	      return false;
	    }
	    return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
	  },
	
	  isCompositeComponentWithType: function (inst, type) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return false;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;
	
	    return constructor === type;
	  },
	
	  isCompositeComponentElement: function (inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
	  },
	
	  isCompositeComponentElementWithType: function (inst, type) {
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;
	
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
	  },
	
	  getRenderedChildOfCompositeComponent: function (inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },
	
	  findAllInRenderedTree: function (inst, test) {
	    if (!inst) {
	      return [];
	    }
	    !ReactTestUtils.isCompositeComponent(inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : invariant(false) : undefined;
	    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function (root, classNames) {
	    if (!Array.isArray(classNames)) {
	      classNames = classNames.split(/\s+/);
	    }
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      if (ReactTestUtils.isDOMComponent(inst)) {
	        var className = inst.className;
	        if (typeof className !== 'string') {
	          // SVG, probably.
	          className = inst.getAttribute('class') || '';
	        }
	        var classList = className.split(/\s+/);
	        return classNames.every(function (name) {
	          return classList.indexOf(name) !== -1;
	        });
	      }
	      return false;
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function (root, className) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' + '(found: ' + all.length + ') for class:' + className);
	    }
	    return all[0];
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function (root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function (root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },
	
	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function (root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
	    });
	  },
	
	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function (root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for componentType:' + componentType + ' (found ' + all.length + ')');
	    }
	    return all[0];
	  },
	
	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function (module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || 'div';
	
	    module.prototype.render.mockImplementation(function () {
	      return React.createElement(mockTagName, null, this.props.children);
	    });
	
	    return this;
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on an `Element` node.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on the `ReactDOMComponent` `comp`.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
	   * @param {!ReactDOMComponent} comp
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
	  },
	
	  nativeTouchData: function (x, y) {
	    return {
	      touches: [{ pageX: x, pageY: y }]
	    };
	  },
	
	  createRenderer: function () {
	    return new ReactShallowRenderer();
	  },
	
	  Simulate: null,
	  SimulateNative: {}
	};
	
	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function () {
	  this._instance = null;
	};
	
	ReactShallowRenderer.prototype.getRenderOutput = function () {
	  return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
	};
	
	var NoopInternalComponent = function (element) {
	  this._renderedOutput = element;
	  this._currentElement = element;
	};
	
	NoopInternalComponent.prototype = {
	
	  mountComponent: function () {},
	
	  receiveComponent: function (element) {
	    this._renderedOutput = element;
	    this._currentElement = element;
	  },
	
	  unmountComponent: function () {}
	
	};
	
	var ShallowComponentWrapper = function () {};
	assign(ShallowComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: function (element) {
	    return new NoopInternalComponent(element);
	  },
	  _replaceNodeWithMarkupByID: function () {},
	  _renderValidatedComponent: ReactCompositeComponent.Mixin._renderValidatedComponentWithoutOwnerOrContext
	});
	
	ReactShallowRenderer.prototype.render = function (element, context) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : invariant(false) : undefined;
	  !(typeof element.type !== 'string') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom ' + 'components, not primitives (%s). Instead of calling `.render(el)` and ' + 'inspecting the rendered output, look at `el.props` directly instead.', element.type) : invariant(false) : undefined;
	
	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(false);
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};
	
	ReactShallowRenderer.prototype.unmount = function () {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};
	
	ReactShallowRenderer.prototype._render = function (element, transaction, context) {
	  if (this._instance) {
	    this._instance.receiveComponent(element, transaction, context);
	  } else {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);
	
	    instance.mountComponent(rootID, transaction, context);
	
	    this._instance = instance;
	  }
	};
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function (domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = findDOMNode(domComponentOrNode);
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }
	
	    var dispatchConfig = ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType];
	
	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(dispatchConfig, ReactMount.getID(node), fakeNativeEvent, node);
	    assign(event, eventData);
	
	    if (dispatchConfig.phasedRegistrationNames) {
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	    } else {
	      EventPropagators.accumulateDirectDispatches(event);
	    }
	
	    ReactUpdates.batchedUpdates(function () {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue(true);
	    });
	  };
	}
	
	function buildSimulators() {
	  ReactTestUtils.Simulate = {};
	
	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element|ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}
	
	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function () {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function () {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};
	
	buildSimulators();
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */
	
	function makeNativeSimulator(eventType) {
	  return function (domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
	    } else if (domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
	    }
	  };
	}
	
	Object.keys(topLevelTypes).forEach(function (eventType) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element|ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
	});
	
	module.exports = ReactTestUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

/***/ },

/***/ 258:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(259), __webpack_require__(229), __webpack_require__(260), __webpack_require__(264), __webpack_require__(230), __webpack_require__(265)], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, $, _, pgFiddleTemplate, playgroundTemplate, ReactDOM, LinkedStateMixin) {
	    'use strict'
	
	    //var React = require('react');
	    //var ReactDOM = require('react-dom');
	    //var _ = require('lodash');
	    //var pgFiddleTemplate = require('./playground-fiddle.rt');
	    //var playgroundTemplate = require('./playground.rt');
	    //var $ = require('jquery');
	    //var LinkedStateMixin = require('react-addons-linked-state-mixin');
	    //function emptyFunc() {
	    //    return null;
	    //}
	
	    //function generateTemplateSource(html, editor, name) {
	    //    var code = null;
	    //    try {
	    //        code = window.reactTemplates.convertTemplateToReact(html.trim().replace(/\r/g, ''), {modules: 'none', name: name});
	    //        clearMessage(editor);
	    //    } catch (e) {
	    //        if (e.name === 'RTCodeError') {
	    //            //index: -1 line: -1 message: "Document should have a root element" name: "RTCodeError"
	    //            editor.annotate({line: e.line, message: e.message, index: e.index});
	    //        } else {
	    //            editor.annotate({line: 1, message: e.message});
	    //        }
	    //        //showMessage(editor, msg);
	    //        console.log(e);
	    //    }
	    //    return code;
	    //}
	
	    ;
	    function showMessage(editor, msg) {
	        if (editor && editor.showMessage) {
	            editor.annotate({ line: 1, message: msg });
	        }
	    }
	
	    function clearMessage(editor) {
	        if (editor && editor.clearAnnotations) {
	            editor.clearAnnotations();
	        }
	    }
	
	    //function generateTemplateFunction(code) {
	    //    try {
	    //        var defineMap = {'react/addons': React, lodash: _};
	    //        var define = function (requirementsNames, content) {
	    //            var requirements = _.map(requirementsNames, function (reqName) {
	    //                return defineMap[reqName];
	    //            });
	    //            return content.apply(this, requirements);
	    //        };
	    //        /*eslint no-eval:0*/
	    //        var res = eval(code);
	    //        return res;
	    //    } catch (e) {
	    //        console.log(e);
	    //        return emptyFunc;
	    //    }
	    //}
	
	    function generateRenderFunc(renderFunc) {
	        return function () {
	            var res = null;
	            try {
	                res = renderFunc.apply(this);
	            } catch (e) {
	                res = React.DOM.div.apply(this, [{ style: { color: 'red' } }, 'Exception:' + e.message]);
	            }
	            return React.DOM.div.apply(this, _.flatten([{ key: 'result' }, res]));
	        };
	    }
	
	    var templateHTML = '<div></div>';
	    var templateProps = ['var template = React.createClass({', '   render: templateRT', '});'].join('\n');
	
	    //var selfCleaningTimeout = {
	    //    componentDidUpdate: function() {
	    //        clearTimeout(this.timeoutID);
	    //    },
	    //    setTimeout: function() {
	    //        console.log('setTimeout');
	    //        clearTimeout(this.timeoutID);
	    //        this.timeoutID = setTimeout.apply(null, arguments);
	    //    }
	    //};
	
	    var Playground = React.createClass({
	        displayName: 'Playground',
	        mixins: [LinkedStateMixin],
	        propTypes: {
	            codeVisible: React.PropTypes.bool,
	            direction: React.PropTypes.oneOf(['horizontal', 'vertical']),
	            fiddle: React.PropTypes.bool,
	            name: React.PropTypes.string,
	            templateHTML: React.PropTypes.string,
	            templateProps: React.PropTypes.string
	        },
	        templateSource: '',
	        validHTML: true,
	        validProps: true,
	        setTimeout: function () {
	            //console.log('setTimeout');
	            clearTimeout(this.timeoutID);
	            this.timeoutID = setTimeout.apply(null, arguments);
	        },
	        getDefaultProps: function () {
	            return {
	                direction: 'horizontal', //vertical
	                codeVisible: true,
	                fiddle: false
	            };
	        },
	        getLayoutClass: function () {
	            return this.props.direction === 'horizontal' && 'horizontal' || 'vertical'; //eslint-disable-line no-extra-parens
	        },
	        //executeCode: function() {
	        //    var mountNode = this.refs.mount.getDOMNode();
	        //
	        //    try {
	        //        React.unmountComponentAtNode(mountNode);
	        //    } catch (e) { }
	        //
	        //    try {
	        //        var compiledCode = this.compileCode();
	        //        if (this.props.renderCode) {
	        //            React.render(
	        //                React.createElement(CodeMirrorEditor, {codeText: compiledCode, readOnly: true}),
	        //                mountNode
	        //            );
	        //        } else {
	        //            eval(compiledCode);
	        //        }
	        //    } catch (err) {
	        //        this.setTimeout(function() {
	        //            React.render(
	        //                React.createElement('div', {className: 'playgroundError'}, err.toString()),
	        //                mountNode
	        //            );
	        //        }, 500);
	        //    }
	        //},
	        getTabs: function () {
	            if (this.props.codeVisible) {
	                return [['templateHTML', 'Template'], ['templateProps', 'Class'], ['templateSource', 'Generated code']];
	            }
	            return [['templateHTML', 'Template'], ['templateSource', 'Generated code']];
	        },
	        updateSample: function (state) {
	            //try {
	            //    React.unmountComponentAtNode(mountNode);
	            //} catch (e) { }
	
	            this.generateCode(state);
	            //this.sampleFunc = generateTemplateFunction(this.templateSource);
	            //this.validHTML = this.sampleFunc !== emptyFunc;
	            this.validHTML = true;
	            this.sampleRender = generateRenderFunc(this.sampleFunc);
	            var editor;
	            try {
	                this.validProps = true;
	                //console.log(state.templateProps);
	                this.sample = eval('(function () {' + this.templateSource + '\n' + state.templateProps + '\n return React.createElement(' + state.name + ');})()'); //eslint-disable-line no-eval
	                clearMessage(this.refs.editorCode);
	            } catch (e) {
	                this.validProps = false;
	                this.sample = null;
	                editor = this.refs.editorCode;
	                this.showError(e, editor);
	            }
	            //classBase.render = this.sampleRender;
	            //this.sample = React.createFactory(React.createClass(classBase));
	        },
	        showError: function (e, editor) {
	            var mountNode = ReactDOM.findDOMNode(this.refs.mount);
	            this.setTimeout(function () {
	                showMessage(editor, e.message);
	                ReactDOM.render(React.createElement('div', { className: 'playground-error' }, e.toString()), mountNode);
	            }, 500);
	        },
	        showErrorAnnotation: function (annot, editor) {
	            var mountNode = ReactDOM.findDOMNode(this.refs.mount);
	            this.setTimeout(function () {
	                editor.annotate(annot);
	                ReactDOM.render(React.createElement('div', { className: 'playground-error' }, annot.message), mountNode);
	            }, 500);
	        },
	        clear: function () {
	            var currentState = {
	                templateHTML: templateHTML,
	                templateProps: templateProps
	            };
	            //this.updateSample(currentState);
	            this.setState(currentState);
	        },
	        generateCode: function (state) {
	            var html = state.templateHTML;
	            var editor = this.refs.editorRT;
	            var name = window.reactTemplates.normalizeName(state.name) + 'RT';
	            var code = null;
	            var annot = null;
	            try {
	                code = window.reactTemplates.convertTemplateToReact(html.trim().replace(/\r/g, ''), { modules: 'none', name: name });
	                clearMessage(editor);
	            } catch (e) {
	                if (e.name === 'RTCodeError') {
	                    //index: -1 line: -1 message: "Document should have a root element" name: "RTCodeError"
	                    annot = { line: e.line, message: e.message, index: e.index };
	                } else {
	                    annot = { line: 1, message: e.message };
	                }
	                this.showErrorAnnotation(annot, editor);
	                //showMessage(editor, msg);
	                console.log(e);
	            }
	            this.templateSource = code;
	        },
	        getInitialState: function () {
	            return {
	                templateHTML: this.props.templateHTML || templateHTML,
	                templateProps: this.props.templateProps || templateProps,
	                name: this.props.name || 'template',
	                currentTab: 'templateHTML'
	            };
	        },
	        componentDidMount: function () {
	            if (this.props.fiddle) {
	                window.addEventListener('resize', this.calcSize);
	                this.calcSize();
	            }
	            this.updateSample(this.state);
	            this.renderSample();
	        },
	        renderSample: function () {
	            var mountNode = ReactDOM.findDOMNode(this.refs.mount);
	            if (this.sample) {
	                ReactDOM.render(this.sample, mountNode);
	            }
	        },
	        componentDidUpdate: function () {
	            this.renderSample();
	        },
	        componentWillUnmount: function () {
	            window.removeEventListener('resize', this.calcSize);
	        },
	        calcSize: function () {
	            var contentHeight = $(window).height() - $('#header').height();
	            var height = contentHeight / 2 - 10;
	
	            $('.code-area').each(function () /*i, k*/{
	                $(this).height(height);
	                //console.log($(this).height());
	            });
	            this.refs.editorCode.editor.refresh();
	            this.refs.editorRT.editor.refresh();
	            this.refs.editorGenerated.editor.refresh();
	        },
	        componentWillUpdate: function (nextProps, nextState) {
	            if (nextState.templateHTML !== this.state.templateHTML || nextState.templateProps !== this.state.templateProps) {
	                this.updateSample(nextState);
	            }
	        },
	        render: function () {
	            this.generateCode(this.state);
	            var template = this.props.fiddle ? pgFiddleTemplate : playgroundTemplate;
	            return template.apply(this);
	        }
	    });
	
	    return Playground;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "playground.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 259:
/***/ function(module, exports) {

	module.exports = jQuery;

/***/ },

/***/ 260:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(239),
	    __webpack_require__(229),
	    __webpack_require__(261)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _, CodeEditor) {
	    'use strict';
	    function onChange1(e) {
	        this.setState({ templateHTML: e.target.value });
	    }
	    function onChange2(e) {
	        this.setState({ templateProps: e.target.value });
	    }
	    function onSubmit3(e) {
	        e.preventDefault();
	    }
	    return function () {
	        return React.createElement(div, { 'className': 'playground' }, React.createElement(div, { 'className': 'fiddle-row' }, React.createElement(div, {
	            'className': 'code-area',
	            'id': 'area-rt'
	        }, React.createElement(CodeEditor, {
	            'ref': 'editorRT',
	            'id': 'editor-rt',
	            'className': 'large-text-area',
	            'value': this.state.templateHTML,
	            'mode': 'html',
	            'onChange': onChange1.bind(this)
	        })), React.createElement(div, {
	            'className': 'code-area',
	            'id': 'area-code'
	        }, React.createElement(CodeEditor, {
	            'ref': 'editorCode',
	            'id': 'editor-code',
	            'className': 'large-text-area',
	            'value': this.state.templateProps,
	            'mode': 'javascript',
	            'onChange': onChange2.bind(this)
	        }))), React.createElement(div, { 'className': 'fiddle-row' }, React.createElement(div, {
	            'className': 'code-area',
	            'id': 'area-generated'
	        }, React.createElement(CodeEditor, {
	            'id': 'editor-generated',
	            'className': 'large-text-area',
	            'ref': 'editorGenerated',
	            'value': this.templateSource,
	            'mode': 'javascript',
	            'readOnly': true
	        })), React.createElement(div, {
	            'className': 'code-area',
	            'id': 'area-result'
	        }    /* <div id="result-container" class="result-area"> */, React.createElement(div, {
	            'id': 'result-area',
	            'key': 'result-area',
	            'className': 'sample-view'
	        }, React.createElement(form, {
	            'className': 'result-area-form',
	            'ref': 'mount',
	            'onSubmit': onSubmit3.bind(this)
	        }    /* <this.sample key="sample"> */
	             /* </this.sample> */)))));
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "playground-fiddle.rt" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 261:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(230), __webpack_require__(229), __webpack_require__(259), __webpack_require__(262), __webpack_require__(263)
	//'./libs/codemirror-4.8/mode/javascript/javascript',
	//'./libs/codemirror-4.8/addon/hint/html-hint',
	//'./libs/codemirror-4.8/addon/hint/show-hint',
	//'./libs/codemirror-4.8/addon/hint/xml-hint',
	//'./libs/codemirror-4.8/addon/hint/html-hint',
	////'./libs/codemirror-4.8/addon/display/panel',
	//'./libs/codemirror-4.8/mode/xml/xml',
	////'./libs/codemirror-4.8/mode/css/css',
	//'./libs/codemirror-4.8/addon/runmode/runmode'
	//'./libs/codemirror-4.8/addon/display/placeholder'
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, ReactDOM, _, $, CodeMirror, CMLint) {
	    'use strict'
	    //codeMirror: 'libs/codemirror-4.8/lib/codemirror',
	    //htmlmixed: 'libs/codemirror-4.8/mode/htmlmixed/htmlmixed',
	    //javascript: 'libs/codemirror-4.8/mode/javascript/javascript'
	
	    ;
	    var rtSchema = {
	        div: {
	            attrs: {
	                'rt-props': null,
	                'rt-if': null,
	                'rt-repeat': null,
	                'rt-class': null,
	                'rt-scope': null,
	                valueLink: null,
	                key: null,
	                ref: null,
	                dangerouslySetInnerHTML: null
	            }
	        }
	    };
	    var tags = CodeMirror.htmlSchema;
	    Object.keys(CodeMirror.htmlSchema).forEach(function (i) {
	        tags[i].attrs = _.defaults(rtSchema.div.attrs, tags[i].attrs);
	    });
	
	    function completeAfter(cm, pred) {
	        //var cur = cm.getCursor();
	        if (!pred || pred()) {
	            setTimeout(function () {
	                if (!cm.state.completionActive) {
	                    cm.showHint({ completeSingle: false });
	                }
	            }, 100);
	        }
	        return CodeMirror.Pass;
	    }
	
	    function completeIfAfterLt(cm) {
	        return completeAfter(cm, function () {
	            var cur = cm.getCursor();
	            return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) === '<'; //eslint-disable-line new-cap
	        });
	    }
	
	    function completeIfInTag(cm) {
	        return completeAfter(cm, function () {
	            var tok = cm.getTokenAt(cm.getCursor());
	            if (tok.type === 'string' && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length === 1)) {
	                return false;
	            }
	            var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
	            return inner.tagName;
	        });
	    }
	
	    return React.createClass({
	        displayName: 'CodeMirrorEditor',
	        propTypes: {
	            id: React.PropTypes.string,
	            readOnly: React.PropTypes.bool,
	            runMode: React.PropTypes.bool,
	            mode: React.PropTypes.string,
	            value: React.PropTypes.string,
	            valueLink: React.PropTypes.string,
	            onChange: React.PropTypes.func
	        },
	        getDefaultProps: function () {
	            return {
	                readOnly: false,
	                mode: 'html'
	            };
	        },
	        getInitialState: function () {
	            return {
	                editorId: _.uniqueId()
	            };
	        },
	        //componentWillMount: function () {
	        //},
	        render: function () {
	            var props = _.omit(this.props, ['ref', 'key', 'value', 'valueLink', 'onChange']);
	            props.id = this.props.id || this.state.editorId;
	            props.defaultValue = this.props.valueLink ? this.props.valueLink() : this.props.value;
	            return React.DOM.textarea(props);
	        },
	        componentWillUpdate: function (nextProps /*, nextState*/) {
	            var value = nextProps.valueLink ? nextProps.valueLink() : nextProps.value;
	            if (this.editor && this.editor.getValue() !== value) {
	                this.editor.setValue(value || '');
	            }
	        },
	        componentDidMount: function () {
	            var value = this.props.valueLink ? this.props.valueLink() : this.props.value;
	            var options = {
	                readOnly: this.props.readOnly,
	                lineWrapping: true,
	                smartIndent: true,
	                matchBrackets: true,
	                value: value,
	                lineNumbers: true,
	                mode: 'javascript',
	                gutters: ['CodeMirror-linenumbers', 'rt-annotations'],
	                theme: 'solarized' //solarized_light solarized-light
	            };
	
	            if (this.props.mode === 'html') {
	                options.mode = 'text/html';
	                options.extraKeys = {
	                    "'<'": completeAfter,
	                    "'/'": completeIfAfterLt,
	                    "' '": completeIfInTag,
	                    "'='": completeIfInTag,
	                    'Ctrl-Space': 'autocomplete'
	                };
	                options.hintOptions = { schemaInfo: tags };
	                //options.gutters = ['CodeMirror-lint-markers'];
	                //options.lint = true;
	            } else {
	                    options.mode = 'javascript';
	                    //options.gutters = ['CodeMirror-lint-markers'];
	                    //options.lint = true;
	                }
	
	            this.editor = CodeMirror.fromTextArea(ReactDOM.findDOMNode(this), options);
	
	            if (!this.props.readOnly) {
	                this.editor.on('change', (function () /*e*/{
	                    if (this.props.valueLink) {
	                        this.props.valueLink(this.editor.getValue());
	                    } else if (this.props.onChange) {
	                        this.props.onChange({ target: { value: this.editor.getValue() } });
	                    }
	                }).bind(this));
	            }
	        },
	        //showMessage: function (msg) {
	        //    //var anOption = document.createElement('div');
	        //    //anOption.innerText = msg;
	        //    //anOption.setAttribute('class', 'error-panel');
	        //    //if (this.panel) {
	        //    //    this.panel.clear();
	        //    //}
	        //    //this.panel = this.editor.addPanel(anOption, {height: 22}); // {position: 'bottom'}
	        //},
	        //clearMessage: function () {
	        //    if (this.panel) {
	        //        this.panel.clear();
	        //        this.panel = null;
	        //    }
	        //},
	        annotate: function (annot) {
	            CMLint.annotate(this.editor, annot);
	        },
	        clearAnnotations: function () {
	            CMLint.clearMarks(this.editor);
	        },
	        componentWillUnmount: function () {
	            this.editor.toTextArea();
	        }
	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "CodeMirrorEditor.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 262:
/***/ function(module, exports) {

	module.exports = CodeMirror;

/***/ },

/***/ 263:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(229), __webpack_require__(259), __webpack_require__(262)], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _, $, CodeMirror) {
	    'use strict';
	
	    function annotationTooltip(ann) {
	        var severity = ann.severity;
	        if (!severity) {
	            severity = 'error';
	        }
	        var tip = document.createElement('div');
	        tip.className = 'CodeMirror-lint-message-' + severity;
	        tip.appendChild(document.createTextNode(ann.message));
	        return tip;
	    }
	
	    var GUTTER_ID = 'rt-annotations';
	
	    function annotate(editor, annot) {
	        //if (annot.index) {
	        //    //posFromIndex
	        //    var pos = editor.findPosH({line: 0, ch: 0}, 25, 'char');
	        //    var range = editor.findWordAt(pos);
	        //    editor.markText(range.anchor,  range.head, {className: 'editor-error'});
	        //}
	        var tipLabel = document.createDocumentFragment(); /*state.hasGutter &&*/
	        var ann = { severity: 'error', message: annot.message };
	        tipLabel.appendChild(annotationTooltip(ann));
	        editor.setGutterMarker(Math.max(annot.line, 0), GUTTER_ID, makeMarker(tipLabel, 'error', false, 'state.options.tooltips'));
	    }
	
	    function clearMarks(cm) {
	        //var state = cm.state.lint;
	        //if (state.hasGutter) cm.clearGutter(GUTTER_ID);
	        //for (var i = 0; i < state.marked.length; ++i)
	        //    state.marked[i].clear();
	        //state.marked.length = 0;
	        cm.clearGutter(GUTTER_ID);
	    }
	
	    function makeMarker(labels, severity, multiple, tooltips) {
	        var marker = document.createElement('div'),
	            inner = marker;
	        marker.className = 'CodeMirror-lint-marker-' + severity;
	        if (multiple) {
	            inner = marker.appendChild(document.createElement('div'));
	            inner.className = 'CodeMirror-lint-marker-multiple';
	        }
	        if (tooltips !== false) {
	            CodeMirror.on(inner, 'mouseover', function (e) {
	                showTooltipFor(e, labels, inner);
	            });
	        }
	        return marker;
	    }
	
	    function showTooltip(e, content) {
	        var tt = document.createElement('div');
	        tt.className = 'CodeMirror-lint-tooltip';
	        tt.appendChild(content.cloneNode(true));
	        document.body.appendChild(tt);
	
	        function position(ev) {
	            if (!tt.parentNode) {
	                return CodeMirror.off(document, 'mousemove', position);
	            }
	            tt.style.top = Math.max(0, ev.clientY - tt.offsetHeight - 5) + 'px';
	            tt.style.left = ev.clientX + 5 + 'px';
	        }
	        CodeMirror.on(document, 'mousemove', position);
	        position(e);
	        if (tt.style.opacity !== null) {
	            tt.style.opacity = 1;
	        }
	        return tt;
	    }
	    function rm(elt) {
	        if (elt.parentNode) {
	            elt.parentNode.removeChild(elt);
	        }
	    }
	    function hideTooltip(tt) {
	        if (!tt.parentNode) {
	            return;
	        }
	        if (tt.style.opacity === null) {
	            rm(tt);
	        }
	        tt.style.opacity = 0;
	        setTimeout(function () {
	            rm(tt);
	        }, 600);
	    }
	
	    function showTooltipFor(e, content, node) {
	        var tooltip = showTooltip(e, content);
	        function hide() {
	            CodeMirror.off(node, 'mouseout', hide);
	            if (tooltip) {
	                hideTooltip(tooltip);tooltip = null;
	            }
	        }
	        var poll = setInterval(function () {
	            if (tooltip) {
	                for (var n = node;; n = n.parentNode) {
	                    if (n === document.body) {
	                        return undefined;
	                    }
	                    if (!n) {
	                        hide();break;
	                    }
	                }
	            }
	            if (!tooltip) {
	                return clearInterval(poll);
	            }
	        }, 400);
	        CodeMirror.on(node, 'mouseout', hide);
	    }
	
	    return {
	        GUTTER_ID: GUTTER_ID,
	        annotate: annotate,
	        clearMarks: clearMarks
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "CMLint.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 264:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(239),
	    __webpack_require__(229),
	    __webpack_require__(261)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _, CodeEditor) {
	    'use strict';
	    function onClick1(tab, tabIndex, evt) {
	        evt.preventDefault();
	        this.setState({ 'currentTab': tab[0] });
	    }
	    function repeatTab2(tab, tabIndex) {
	        return React.createElement(li, {
	            'role': 'presentation',
	            'key': 'tab' + tabIndex,
	            'className': _.keys(_.pick({ active: this.state.currentTab === tab[0] }, _.identity)).join(' '),
	            'onClick': onClick1.bind(this, tab, tabIndex)
	        }, React.createElement(a, { 'aria-controls': tab[1] }, tab[1]));
	    }
	    function onChange3(evt) {
	        this.setState({ templateHTML: evt.target.value });
	    }
	    function onChange4(evt) {
	        this.setState({ templateProps: evt.target.value });
	    }
	    function onSubmit5(e) {
	        e.preventDefault();
	    }
	    return function () {
	        return React.createElement(div, { 'className': 'playground' }, React.createElement(div, {
	            'id': this.props.id + '-myTab',
	            'className': 'code-area ' + this.getLayoutClass()
	        }    /*  Nav tabs  */, React.createElement.apply(this, [
	            ul,
	            {
	                'className': 'nav nav-tabs',
	                'role': 'tablist'
	            },
	            _.map(this.getTabs(), repeatTab2.bind(this))
	        ])    /*  Tab panes  */, React.createElement(div, {}, this.state.currentTab === 'templateHTML' ? React.createElement(div, {
	            'key': 'editorRT',
	            'className': 'tab-pane active'
	        }, React.createElement(CodeEditor, {
	            'ref': 'editorRT',
	            'className': 'large-text-area',
	            'style': { border: this.validHTML ? '' : '2px solid red' },
	            'value': this.state.templateHTML,
	            'mode': 'html',
	            'onChange': onChange3.bind(this)
	        })) : null, this.state.currentTab === 'templateProps' ? React.createElement(div, {
	            'key': 'editorCode',
	            'className': 'tab-pane active'
	        }, React.createElement(CodeEditor, {
	            'ref': 'editorCode',
	            'className': 'large-text-area',
	            'style': { border: this.validProps ? '' : '2px solid red' },
	            'value': this.state.templateProps,
	            'mode': 'javascript',
	            'onChange': onChange4.bind(this)
	        })) : null, this.state.currentTab === 'templateSource' ? React.createElement(div, {
	            'key': 'templateSource',
	            'className': 'tab-pane active'
	        }, React.createElement(CodeEditor, {
	            'className': 'large-text-area',
	            'value': this.templateSource,
	            'mode': 'javascript',
	            'readOnly': true
	        })) : null)), React.createElement(div, {
	            'key': 'result-area',
	            'className': 'result-area ' + this.getLayoutClass()
	        }, React.createElement(span, { 'className': 'preview-title' }, '\xA0'), React.createElement(form, {
	            'ref': 'mount',
	            'className': 'sample-view',
	            'onSubmit': onSubmit5.bind(this)
	        }    /* <this.sample key="sample"> */
	             /* </this.sample> */)), React.createElement(br, { 'style': { clear: 'both' } }));
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "playground.rt" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 265:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(241);

/***/ },

/***/ 266:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(62), RootInstanceProvider = __webpack_require__(70), ReactMount = __webpack_require__(72), React = __webpack_require__(125); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(229), __webpack_require__(259), //'../libs/codemirror-4.8/lib/codemirror',
	//'../libs/codemirror-4.8/mode/javascript/javascript',
	//'../libs/codemirror-4.8/mode/xml/xml',
	//'../libs/codemirror-4.8/addon/runmode/runmode'
	__webpack_require__(262), __webpack_require__(230)], __WEBPACK_AMD_DEFINE_RESULT__ = function (React, _, $, CodeMirror, ReactDOM) {
	    'use strict';
	
	    return React.createClass({
	        displayName: 'CodeMirrorViewer',
	        propTypes: {
	            id: React.PropTypes.string,
	            mode: React.PropTypes.string,
	            value: React.PropTypes.string,
	            valueLink: React.PropTypes.string
	        },
	        getDefaultProps: function () {
	            return { mode: 'html' };
	        },
	        getInitialState: function () {
	            return { editorId: _.uniqueId() };
	        },
	        render: function () {
	            var props = _.omit(this.props, ['ref', 'key', 'value', 'valueLink', 'onChange']);
	            props.id = this.props.id || this.state.editorId;
	            props.className = 'cm-s-default';
	            var value = this.props.valueLink ? this.props.valueLink() : this.props.value;
	            return React.DOM.pre(props, value);
	        },
	        componentWillUpdate: function (nextProps /*, nextState*/) {
	            var value = nextProps.valueLink ? nextProps.valueLink() : nextProps.value;
	            if (this.editor && this.editor.getValue() !== value) {
	                this.editor.setValue(value || '');
	            }
	        },
	        componentDidMount: function () {
	            var value = this.props.valueLink ? this.props.valueLink() : this.props.value;
	            var mode = this.props.mode;
	            if (this.props.mode === 'html') {
	                mode = 'text/html';
	            }
	            this.editor = CodeMirror.runMode(value, mode, ReactDOM.findDOMNode(this));
	        },
	        componentWillUnmount: function () {
	            this.editor.toTextArea();
	        }
	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(233); if (makeExportsHot(module, __webpack_require__(125))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "CodeMirrorViewer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },

/***/ 267:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    render: <%= name %>RT\n});"

/***/ },

/***/ 268:
/***/ function(module, exports) {

	module.exports = "<h2>Hello world</h2>\n"

/***/ },

/***/ 269:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {edited: '', todos: [], counter: 0};\n    },\n    add: function () {\n        if (this.state.edited.trim().length === 0) {\n            return;\n        }\n        var newTodo = {value: this.state.edited, done: false, key: this.state.counter};\n        this.setState({todos: this.state.todos.concat(newTodo), edited: '', counter: this.state.counter + 1});\n    },\n    remove: function (todo) {\n        this.setState({todos: _.reject(this.state.todos, todo)});\n    },\n    toggleChecked: function (index) {\n        var todos = _.cloneDeep(this.state.todos);\n        todos[index].done = !todos[index].done;\n        this.setState({todos: todos});\n    },\n    clearDone: function () {\n        this.setState({todos: this.getPending()});\n    },\n    getDone: function () {\n        return _.filter(this.state.todos, {done: true});\n    },\n    getPending: function () {\n        return _.filter(this.state.todos, {done: false});\n    },\n    render: <%= name %>RT\n});\n"

/***/ },

/***/ 270:
/***/ function(module, exports) {

	module.exports = "<div>\n    <strong>{this.getDone().length}</strong>\n    done,\n    <strong>{this.getPending().length}</strong>\n    pending\n    <br/>\n    <div rt-repeat=\"todo in this.state.todos\" key=\"{todo.key}\">\n        <img src=\"img/samples/delete.png\"\n             onClick=\"()=>this.remove(todo)\"\n             title=\"Remove Todo\"\n             style=\"cursor:pointer\"/>\n        <input type=\"checkbox\" checked=\"{todo.done}\"\n               onChange=\"()=>this.toggleChecked(todoIndex)\"/>\n        <span style=\"text-decoration: {todo.done ? 'line-through': 'none'}\">{todo.value}</span>\n    </div>\n    <input key=\"myinput\" style=\"width:130px\" type=\"text\"\n           onKeyDown=\"(e) => if (e.keyCode == 13) { e.preventDefault(); this.add(); }\"\n           valueLink=\"{this.linkState('edited')}\"/>\n    <button onClick=\"()=>this.add()\">Add</button><br/>\n    <button onClick=\"()=>this.clearDone()\">Clear done</button>\n</div>"

/***/ },

/***/ 271:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    getInitialState: function () {\n        return {open: false};\n    },\n    toggle: function() {\n        this.setState({open: !this.state.open});\n    },\n    render: <%= name %>RT\n});"

/***/ },

/***/ 272:
/***/ function(module, exports) {

	module.exports = "<div>\n    <h4 style=\"cursor:pointer\" onClick=\"()=>this.toggle()\">\n        Click to {this.state.open ? 'close' : 'open'}\n    </h4>\n    <p rt-if=\"this.state.open\">This is my paragraph. It opens and\n                               closes</p>\n</div>"

/***/ },

/***/ 273:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function() {\n        return { key: 'color', val: 'blue' };\n    },\n    getProps: function() {\n        var ret = { style: {\n          color: 'black',\n          backgroundColor: 'white',\n          borderColor: 'black'\n        }};\n        ret.style[this.state.key] = this.state.val;\n        return ret;\n    },\n    render: <%= name %>RT\n});\n"

/***/ },

/***/ 274:
/***/ function(module, exports) {

	module.exports = "<div>\n    Style:\n    <select valueLink=\"{this.linkState('key')}\">\n        <option value=\"color\">Color</option>\n        <option value=\"backgroundColor\">Background color</option>\n        <option value=\"borderColor\">Border color</option>\n    </select><br/>\n    Value:\n    <select valueLink=\"{this.linkState('val')}\">\n        <option value=\"blue\">Blue</option>\n        <option value=\"red\">Red</option>\n        <option value=\"yellow\">Yellow</option>\n    </select><br/><br/>\n    <div style=\"padding:5px;text-align:center;border:1px solid\"\n         rt-props=\"this.getProps()\">Sample</div>\n</div>"

/***/ },

/***/ 275:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    getInitialState: function () {\n        return {\n            items: ['One', 'Two', 'Three']\n        };\n    },\n    render: <%= name %>RT\n});"

/***/ },

/***/ 276:
/***/ function(module, exports) {

	module.exports = "<div>\n    <ul>\n        <li rt-repeat=\"item in this.state.items\">{item}</li>\n    </ul>\n</div>"

/***/ },

/***/ 277:
/***/ function(module, exports) {

	module.exports = "var <%= name %> = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function() {\n        this.cityIds = [5391959,293397,2643743];\n        this.fetchWeather();\n        return { loading: true, cityToAdd: '', info: [] };\n    },\n    addCity: function() {\n        if (this.state.cityToAdd.trim() == '') {\n            return;\n        }\n        this.setState({ loading: true, cityToAdd: '' });\n        $.get('http://api.openweathermap.org/data/2.5/weather?q=' + this.state.cityToAdd, this.findCityCallback);\n    },\n    findCityCallback: function(result) {\n        if (result.id && !_.contains(this.cityIds, result.id)) {\n            this.cityIds.unshift(result.id);\n            this.fetchWeather();\n        } else {\n            this.setState({ loading: false });\n        }\n    },\n    refresh: function() {\n        this.setState({ loading:true });\n        this.fetchWeather();\n    },\n    fetchWeather: function() {\n       $.get('http://api.openweathermap.org/data/2.5/group?id=' + this.cityIds.join(',') + '&units=metric', this.fetchWeatherCallback);\n    },\n    fetchWeatherCallback: function(result) {\n        this.setState({ loading:false, info: result.list });\n    },\n    render: <%= name %>RT\n});\n"

/***/ },

/***/ 278:
/***/ function(module, exports) {

	module.exports = "<div>\n    <h4>Cities weather report</h4>\n    <input placeholder=\"Type a city to add\"\n           style=\"width:130px\"\n           valueLink=\"{this.linkState('cityToAdd')}\"\n           onKeyDown=\"(e)=>if (e.keyCode === 13) { e.preventDefault(); this.addCity(); }\"/>\n    <button onClick=\"{this.addCity}\">Add</button>\n    <div key=\"preloader\" rt-if=\"this.state.loading\">\n        -- Loading --\n    </div>\n    <div rt-repeat=\"city in this.state.info\" key=\"{city.id}\">\n        {cityIndex+1})\n        <img rt-repeat=\"weather in city.weather\"\n             src=\"http://openweathermap.org/img/w/{weather.icon}.png\"\n             title=\"{weather.description}\"/>\n        <span style=\"white-space:nowrap\">{city.name}, {city.sys.country}</span>\n    </div>\n    <button onClick=\"{this.refresh}\">Refresh</button>\n</div>"

/***/ },

/***/ 279:
/***/ function(module, exports) {

	module.exports = "<rt-require dependency=\"comps/myComp\" as=\"myComp\"/>\n<rt-require dependency=\"utils/utils\" as=\"utils\"/>\n<div>\n    <myComp customProp=\"{utils.doSomething()}\">myComp is just a regular tag</myComp>\n</div>\n"

/***/ }

});
//# sourceMappingURL=home.js.map