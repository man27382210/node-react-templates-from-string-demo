'use strict';

var path = require('path');
var webpack = require('webpack');
var commonsPlugin = new webpack.optimize.CommonsChunkPlugin('commons.js');

var root = path.resolve(__dirname, '..');

module.exports = function (options) {
    var ret = {
        //devtool: 'eval',
        devtool: 'source-map',
        context: root,
        entry: {
            fiddle: ['webpack-dev-server/client?http://localhost:3000',
                     'webpack/hot/only-dev-server',
                     './src/fiddle-main.js'],
            home: ['webpack-dev-server/client?http://localhost:3000',
                   'webpack/hot/only-dev-server',
                   './src/home-main.js']
        },
        output: {
            filename: '[name].js',
            path: path.join(root, 'dist'),
            publicPath: '/static/'
        },
        plugins: [
            commonsPlugin
        ],
        externals: {
            // require("jquery") is external and available on the global var jQuery
            jquery: 'jQuery',
            react: 'React',
            'react/addons': 'React',
            lodash: '_',
            bootstrap: 'bootstrap',
            firebase: 'Firebase',
            codemirror: 'CodeMirror',
            '../libs/codemirror-4.8/lib/codemirror': 'CodeMirror'
            //'./libs/codemirror-4.8/mode/javascript/javascript',
            //'./libs/codemirror-4.8/addon/hint/html-hint',
            //'./libs/codemirror-4.8/addon/hint/show-hint',
            //'./libs/codemirror-4.8/addon/hint/xml-hint',
            //'./libs/codemirror-4.8/addon/hint/html-hint',
            ////'./libs/codemirror-4.8/addon/display/panel',
            //'./libs/codemirror-4.8/mode/xml/xml',
            ////'./libs/codemirror-4.8/mode/css/css',
            //'./libs/codemirror-4.8/addon/runmode/runmode'

            /*
             babel-core babel-eslint babel-loader css-loader file-loader json-loader raw-loader react-templates-loader

             */
        },
        resolve: {
            // you can now require('file') instead of require('file.coffee')
            extensions: ['', '.js', '.json'],
            alias: {
                //bootstrap: 'empty'
            },
        },
        module: {
            loaders: [
                {test: /\.js$/, exclude: /node_modules/, loaders: ['react-hot', 'babel-loader']},
                {test: /\.jsx$/, loaders: ['babel-loader']},
                {test: /\.html$/, loader: 'file?name=[name].[ext]'},
                {test: /\.json$/, loader: 'json-loader'},
                {test: /\.less$/, loader: 'style-loader!css-loader!less-loader'}, // use ! to chain loaders
                {test: /\.css$/, loader: 'style-loader!css-loader'},
                {test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}, // inline base64 URLs for <=8k images, direct URLs for the rest
                {test: /\.rt/, exclude: /samples/, loaders: ['react-hot', 'react-templates-loader']},
                {test: /\.text/, loaders: ['raw-loader']}
                //"md|markdown": ["html-loader", "markdown-loader"]
            ]
        }
    };


    if (options.minimize) {
        ret.entry = {
            fiddle: ['./src/fiddle-main.js'],
            home: ['./src/home-main.js']
        };
        ret.plugins.push(
            new webpack.optimize.UglifyJsPlugin({compressor: {warnings: false}}),
            new webpack.optimize.DedupePlugin()
        );
    } else {
        ret.entry = {
            fiddle: ['webpack-dev-server/client?http://localhost:3000',
                     'webpack/hot/only-dev-server',
                     './src/fiddle-main.js'],
            home: ['webpack-dev-server/client?http://localhost:3000',
                   'webpack/hot/only-dev-server',
                   './src/home-main.js']
        };
        ret.plugins.push(
            new webpack.HotModuleReplacementPlugin()
        );
    }

    return ret;
};